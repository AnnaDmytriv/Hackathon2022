{"version":3,"file":"index.js","sources":["../app/consts/validatorScores.js","../app/domHandler/handler.js","../app/validators/tagName.js","../app/validators/parents.js","../app/validators/position.js","../app/Validators/tagName.js","../app/Validators/children.js","../app/services/validatorsManager.js","../app/services/elementDetector.js","../app/services/storage.js","../app/index.js"],"sourcesContent":["export const SCORE = {\r\n    TAG: 50,\r\n    POSITION: 10,\r\n    ATTR: 10,\r\n    PARENT: 10,\r\n    CHILDREN: 10,\r\n    CONTENT: 10\r\n}","export function getNodeAttributes(element, isSVG = false) {\r\n    const attributes = element.attributes ? [...element.attributes] : [];\r\n    const attr = {};\r\n    let namespace;\r\n    attributes.forEach(({ nodeName, nodeValue }) => {\r\n      attr[nodeName] = nodeValue;\r\n    });\r\n    console.log(attr);\r\n    return attr;\r\n  }","export const getTagNameScore = (currTagName, oldTagName) => {\r\n\r\n    let score;\r\n\r\n    if (currTagName == oldTagName) {\r\n        score = 10;\r\n    } else if (currTagName == \"DIV\" && oldTagName == \"SPAN\" || currTagName == \"SPAN\" && oldTagName == \"DIV\") {\r\n        score = 7;\r\n    } else if (currTagName == \"LINK\" && oldTagName == \"BUTTON\" || currTagName == \"BUTTON\" && oldTagName == \"LINK\") {\r\n        score = 5;\r\n    } else {\r\n        score = 0;\r\n    }\r\n\r\n    return score;\r\n}\r\n","import { getTagNameScore } from \"./tagName\";\r\n\r\nexport const getParentsScore = (currParent, oldParent)=>{\r\n\r\n    let score;\r\n    const elParentAttr = JSON.stringify(currParent.attributes);\r\n    const parentAttr = JSON.stringify(oldParent.attributes);\r\n\r\n    if(currParent.tagName == oldParent.tagName && elParentAttr === parentAttr){\r\n        score = 10;\r\n    }else if(currParent.tagName == oldParent.tagName && elParentAttr != parentAttr){\r\n        score = 5;\r\n    }else if(elParentAttr === parentAttr){\r\n        const tagScore = getTagNameScore(currParent.tagName, oldParent.tagName);\r\n        score = tagScore >= 5 ? 5 : 0;\r\n    }\r\n\r\n    return score;\r\n};","export const getPositionScore = (currEl, oldEl)=>{\r\n    \r\n    const bodyRect = document.body.getBoundingClientRect();\r\n    const elmRect = currEl.getBoundingClientRect();\r\n    const currX = elmRect.left - bodyRect.left;\r\n    const currY = elmRect.top - bodyRect.top;\r\n\r\n    const oldX = oldEl.position.x;\r\n    const oldY = oldEl.position.y;\r\n    \r\n    const yDiff = Math.abs(currY - oldY);\r\n    const xDiff = Math.abs(currX - oldX);\r\n\r\n    let score;\r\n    if(currX == oldX && currY == oldY){\r\n        score = 10;\r\n    }else if(currX == oldX && currY != oldY){\r\n       score = yDiff > 200 ? 2 : 7;  \r\n    }else if(currX != oldX && currY == oldY){\r\n        score = xDiff > 200 ? 2 : 7;  \r\n    }else{\r\n        score = xDiff > 500 && yDiff > 500 ? 0 : 2; \r\n    }\r\n\r\n    return score;\r\n}","export const getTagNameScore = (currTagName, oldTagName) => {\r\n\r\n    let score;\r\n\r\n    if (currTagName == oldTagName) {\r\n        score = 10;\r\n    } else if (currTagName == \"DIV\" && oldTagName == \"SPAN\" || currTagName == \"SPAN\" && oldTagName == \"DIV\") {\r\n        score = 7;\r\n    } else if (currTagName == \"LINK\" && oldTagName == \"BUTTON\" || currTagName == \"BUTTON\" && oldTagName == \"LINK\") {\r\n        score = 5;\r\n    } else {\r\n        score = 0;\r\n    }\r\n\r\n    return score;\r\n}\r\n","export const getChildrenScore = (el, dataObj) => {\r\n  let score = 0;\r\n  const currentChildren = el.children.length;\r\n  const { children } = dataObj;\r\n  if (children === currentChildren) {\r\n    return 100;\r\n  }\r\n\r\n  if (children > 0 && currentChildren === 0) {\r\n    return 0;\r\n  }\r\n\r\n  return score;\r\n};\r\n","import { SCORE } from \"../consts/validatorScores\";\r\nimport { getAttrsScore } from \"../validators/attributes\";\r\nimport { getParentsScore } from \"../validators/parents\";\r\nimport { getPositionScore } from \"../validators/position\";\r\nimport { getTagNameScore } from \"../Validators/tagName\";\r\nimport { getChildrenScore } from \"../Validators/children\";\r\nimport { getTextScore } from \"../Validators/textContent\";\r\n\r\nexport const getFinalScore = (currEl, oldEl) => {\r\n\r\n    // const attrScore = {\r\n    //     weight: SCORE.ATTR,\r\n    //     score: getAttrsScore(currEl, oldEl)\r\n    // };\r\n    const parentScore = {\r\n        weight: SCORE.PARENT,\r\n        score: getParentsScore(currEl, oldEl)\r\n    };\r\n    const positionScore = {\r\n        weight: SCORE.POSITION,\r\n        score: getPositionScore(currEl, oldEl)\r\n    };\r\n    const tagScore = {\r\n        weight: SCORE.TAG,\r\n        score: getTagNameScore(currEl.tagName, oldEl.tagName)\r\n    };\r\n    const childrenScore = {\r\n        weight: SCORE.CHILDREN,\r\n        score: getChildrenScore(currEl, oldEl)\r\n    };\r\n    // const contentScore = {\r\n    //     weight: SCORE.CONTENT,\r\n    //     score: getTextScore(currEl, oldEl)\r\n    // };\r\n\r\n    return weightScore([parentScore, positionScore, tagScore, childrenScore]);\r\n};\r\n\r\nconst weightScore = (validatorsArray) => {\r\n    let finalScore = 0;\r\n    validatorsArray.forEach(validator => {\r\n        const weight = validator.weight;\r\n        const score = validator.score;\r\n        finalScore += percentage(weight, score);\r\n    });\r\n    return finalScore;\r\n};\r\n\r\nconst percentage = (percent, score) => {\r\n    return score * percent / 100;\r\n};\r\n","import { getFinalScore } from \"./validatorsManager\";\r\n\r\nexport const detectElement = (oldEl) => {\r\n\r\n    const elsInContext = document.querySelectorAll(`#${oldEl.contextId} *`);\r\n    let mostCompatibleEl, maxScore = 0;\r\n\r\n    for (let el of elsInContext) {\r\n        const score = getFinalScore(el, oldEl);\r\n        if (score > maxScore) {\r\n            mostCompatibleEl = el;\r\n        }\r\n    };\r\n    console.log(\"Found element: \", mostCompatibleEl);\r\n    if (mostCompatibleEl) addBorder(mostCompatibleEl);\r\n};\r\n\r\nconst addBorder = (el) => {\r\n    el.style.border = \"1px solid red\";\r\n};","import { getNodeAttributes } from \"../domHandler/handler\";\r\n\r\nexport const getErrorElements = () => {\r\n    return JSON.parse(localStorage.getItem(\"Errors\"));\r\n};\r\n\r\nexport const getFirstId = (el) => {\r\n\r\n    let id = el.getAttribute(\"id\");\r\n\r\n    while(!id){\r\n        el = el.parentElement;\r\n        id = el.getAttribute(\"id\");\r\n    }\r\n\r\n    return id;\r\n}\r\n\r\nexport const saveErrorInDB = () => {\r\n    const elWithError = document.querySelector(\"img[src='images/5.webp']\").parentElement;\r\n\r\n    const bodyRect = document.body.getBoundingClientRect();\r\n    const elmRect = elWithError.getBoundingClientRect();\r\n    const absX = elmRect.left - bodyRect.left;\r\n    const absY = elmRect.top - bodyRect.top;\r\n\r\n    const elementText = [...elWithError.childNodes].filter(node => node.nodeType === Node.TEXT_NODE).map(node => node.textContent).join('')\r\n    \r\n\r\n    const contextId = getFirstId(elWithError);\r\n\r\n    const error = {\r\n        tagName: elWithError.tagName,\r\n        parent: {\r\n            tag: elWithError.parentElement.tagName,\r\n            attributes: getNodeAttributes(elWithError.parentElement),\r\n        },\r\n        attributes: getNodeAttributes(elWithError),\r\n        children: elWithError.children.length,\r\n        content: elementText,\r\n        position: {\r\n            x: absX,\r\n            y: absY\r\n        },\r\n        contextId\r\n    }\r\n\r\n    localStorage.setItem(\"Errors\", JSON.stringify([error]));\r\n};","import { detectElement } from \"./services/elementDetector\";\r\nimport { getErrorElements, saveErrorInDB } from \"./services/storage\";\r\n\r\nsaveErrorInDB();\r\n\r\nconst errors = getErrorElements();\r\n\r\nerrors.forEach(err => {\r\n    detectElement(err);\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["SCORE","getNodeAttributes","element","isSVG","attributes","attr","forEach","nodeName","nodeValue","console","log","getParentsScore","currParent","oldParent","score","elParentAttr","JSON","stringify","parentAttr","tagName","tagScore","currTagName","oldTagName","getTagNameScore","getPositionScore","currEl","oldEl","bodyRect","document","body","getBoundingClientRect","elmRect","currX","left","currY","top","oldX","position","x","oldY","y","yDiff","Math","abs","xDiff","getChildrenScore","el","dataObj","currentChildren","children","length","getFinalScore","parentScore","weight","positionScore","childrenScore","weightScore","validatorsArray","finalScore","validator","percentage","percent","addBorder","style","border","elWithError","querySelector","parentElement","absX","absY","elementText","childNodes","filter","node","nodeType","Node","TEXT_NODE","map","textContent","join","contextId","id","getAttribute","getFirstId","error","parent","tag","content","localStorage","setItem","saveErrorInDB","parse","getItem","err","elsInContext","querySelectorAll","mostCompatibleEl","detectElement"],"mappings":"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"}